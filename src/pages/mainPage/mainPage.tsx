import React from "react";
import classNames from "classnames/bind";
import styles from "./mainPage.module.scss";

const cx = classNames.bind(styles);

const MainPage: React.FC = () => {
  return (
    <div className={cx('container')}>
      <h4 className={cx('headline')}>Вступ до теорії алгоритмів</h4>
      <p>У техніку термін алгоритм прийшов разом з кібернетикою. Поняття алгоритму допомогло, наприклад, точно визначити, що означає ефективно задати послідовність керуючих сигналів. 
        Застосування ЕОМ послужило стимулом розвитку теорії алгоритмів і вивчення алгоритмічних моделей, до самостійного вивчення алгоритмів з метою їх порівняння з роботи даного продукту (числу дій, витраті пам'яті), а також їх оптимізації.</p>
      <p>Теорія алгоритмів зробила істотний вплив на розвиток ЕОМ і практику програмування. У теорії алгоритмів були передбачити основні концепції, закладені в апаратуру і мови програмування ЕОМ. 
        Так, мікропрограмування будується на ідеях машин Тюрінга, структурне програмування запозичило свої конструкції з теорії рекурсивних функцій, мови символьного обробки інформації (РЕФАЛ, ПРОЛОГ) беруть початок від нормальних алгоритмів Маркова і систем Посту.</p>
      <p>Теорія алгоритмів – наука про загальні властивості алгоритмів. Вона визначає та досліджує формальні моделі алгоритмів і алгоритмічно обчислюваних функцій.</p>
      <p>Загальна Теорія алгоритмів займається проблемою ефективної обчислюваності. Розроблено кілька формальних визначень алгоритму, в яких ефективність і кінцівку обчислень може бути визначена кількісно - числом елементарних кроків і обсягом необхідної пам'яті.</p>
      <p>На сучасному рівні теорія алгоритмів тісно пов’язана з теоретичною математикою, що надає їй апарат для дослідження розв’язності проблем та з прикладною математикою, що вивчає моделювання явищ реального світу.
         У теорії алгоритмів розроблені та використовуються різні алгоритмічні системи, кожну з яких призначено для побудови алгоритмів розв’язання задач певного класу. Це такі системи, як рекурсивні функції, нормальні алгоритми Маркова, машини Поста та Тюрінга, абстрактні автомати, формальні граматики та інші.  
         У сучасній програмної інженерії алгоритми, як методи вирішення завдань, займають провідне місце в порівнянні з традиційною математикою. Причому не важливо, існує чи ні чисте алгоритмічне рішення в абстрактних моделях алгоритмів. Якщо рішення задачі необхідно, широко використовується евристика, а "доказом" працездатності алгоритму є успішне його тестування. </p>
    </div>
  );
};

export default MainPage;
